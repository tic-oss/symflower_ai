
// Generated by CodiumAI

import com.cmi.tic.BasicMathOperations;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.*;

public class BasicMathOperationsTest {


    // Dividing two positive integers
    @Test
    public void test_divide_positive_integers() {
        BasicMathOperations b = new BasicMathOperations();
        int dividend = 10;
        int divisor = 2;
        int expected = 5;
        int actual = b.divide(dividend, divisor);

        assertEquals(expected, actual);
    }

    // Dividing two negative integers
    @Test
    public void test_divide_negative_integers() {
        BasicMathOperations b = new BasicMathOperations();
        int dividend = -10;
        int divisor = -2;
        int expected = 5;
        int actual = b.divide(dividend, divisor);

        assertEquals(expected, actual);
    }

    // Dividing zero by a positive integer
    @Test
    public void test_divide_zero_by_positive_integer() {
        BasicMathOperations b = new BasicMathOperations();
        int dividend = 0;
        int divisor = 5;
        int expected = 0;
        int actual = b.divide(dividend, divisor);

        assertEquals(expected, actual);
    }

    // Dividing the largest negative integer by -1
    @Test
    public void test_divide_largest_negative_by_minus_one() {
        BasicMathOperations b = new BasicMathOperations();
        int dividend = Integer.MIN_VALUE;
        int divisor = -1;
        int expected = Integer.MAX_VALUE;
        int actual = b.divide(dividend, divisor);

        assertEquals(expected, actual);
    }

    // Dividing the largest negative integer by the smallest negative integer
    @Test
    public void test_divide_largest_negative_by_smallest_negative() {
        BasicMathOperations b = new BasicMathOperations();
        int dividend = Integer.MIN_VALUE;
        int divisor = Integer.MIN_VALUE;
        int expected = 1;
        int actual = b.divide(dividend, divisor);

        assertEquals(expected, actual);
    }

    // Dividing the largest negative integer by the largest positive integer
    @Test
    public void test_divide_largest_negative_by_largest_positive() {
        BasicMathOperations b = new BasicMathOperations();
        int dividend = Integer.MIN_VALUE;
        int divisor = Integer.MAX_VALUE;
        int expected = -1;
        int actual = b.divide(dividend, divisor);

        assertEquals(expected, actual);
    }

    @Test
    public void divide() {
        BasicMathOperations b = new BasicMathOperations();
        int dividend = 123;
        int divisor = 123;
        int expected = 123;
        int actual = b.divide(dividend, divisor);

        assertEquals(expected, actual);
    }

}
