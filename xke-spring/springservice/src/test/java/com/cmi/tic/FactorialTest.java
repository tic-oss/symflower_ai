package com.cmi.tic;
// Generated by CodiumAI

import com.cmi.tic.Factorial;

import org.junit.Test;

import java.math.BigInteger;

import static org.junit.Assert.*;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class FactorialTest {


    // Returns correct factorial for positive integer input
    @Test
    public void test_returns_correct_factorial_for_positive_integer_input() {
        BigInteger result = Factorial.factorial(5);
        assertEquals(BigInteger.valueOf(120), result);
    }

    // Returns BigInteger.ONE for input 0 or 1
    @Test
    public void test_returns_big_integer_one_for_input_zero_or_one() {
        BigInteger result1 = Factorial.factorial(0);
        BigInteger result2 = Factorial.factorial(1);
        assertEquals(BigInteger.ONE, result1);
        assertEquals(BigInteger.ONE, result2);
    }

    // Throws IllegalArgumentException for negative input
    @Test
    public void test_throws_illegal_argument_exception_for_negative_input() {
        assertThrows(IllegalArgumentException.class, () -> {
            Factorial.factorial(-5);
        });
    }

    // Returns correct factorial for input 20
    @Test
    public void test_returns_correct_factorial_for_input_twenty() {
        BigInteger result = Factorial.factorial(20);
        assertEquals(new BigInteger("2432902008176640000"), result);
    }

    // Returns correct factorial for input 100
    @Test
    public void test_returns_correct_factorial_for_input_one_hundred() {
        BigInteger result = Factorial.factorial(100);
        assertEquals(new BigInteger("93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000"), result);
    }

    // Returns correct factorial for input 500


}
