
// Generated by CodiumAI

import com.cmi.tic.Factorial;

import org.junit.Test;
import static org.junit.Assert.*;

public class FactorialTest {


    // Returns 1 when input is 0 or 1
    @Test
    public void test_returns_1_for_0_or_1() {
        BigInteger result = Factorial.factorial(0);
        assertEquals(BigInteger.ONE, result);

        result = Factorial.factorial(1);
        assertEquals(BigInteger.ONE, result);
    }

    // Returns the correct factorial value for positive integers
    @Test
    public void test_returns_correct_factorial_for_positive_integers() {
        BigInteger result = Factorial.factorial(5);
        assertEquals(BigInteger.valueOf(120), result);

        result = Factorial.factorial(10);
        assertEquals(BigInteger.valueOf(3628800), result);
    }

    // Can handle large input values without overflowing
    @Test
    public void test_handles_large_input_values_without_overflowing() {
        BigInteger result = Factorial.factorial(20);
        assertEquals(new BigInteger("2432902008176640000"), result);

        result = Factorial.factorial(30);
        assertEquals(new BigInteger("265252859812191058636308480000000"), result);
    }

    // Throws an IllegalArgumentException when input is negative
    @Test
    public void test_throws_IllegalArgumentException_for_negative_input() {
        assertThrows(IllegalArgumentException.class, () -> {
            Factorial.factorial(-5);
        });
    }

    // Returns the correct factorial value for the largest possible input value
    @Test
    public void test_returns_correct_factorial_for_largest_input_value() {
        BigInteger result = Factorial.factorial(Integer.MAX_VALUE);
        // Expected value is not provided since it is too large to include here
        assertNotNull(result);
    }

    // Can handle input values up to 1000
    @Test
    public void test_handles_input_values_up_to_1000() {
        BigInteger result = Factorial.factorial(1000);
        // Expected value is not provided since it is too large to include here
        assertNotNull(result);
    }

}